{"version":3,"sources":["component/Spinner/index.jsx","config/index.js","util/gqlRequest.js","services/device.js","pages/home/components/UpdateDeviceModal.jsx","pages/home/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["Spinne","loading","className","Spinner","style","width","height","config","API_KEY","process","API_URL","TOKEN_URL","X_API_KEY","getAccessToken","a","created_at","Date","now","axios","post","headers","grant_type","scope","data","localStorage","setItem","access_token","console","log","gqlRequest","query","variables","ACCESS_TOKEN","getItem","EXPIRED_AT","Number","method","url","Authorization","JSON","stringify","response","getDevices","_","get","updateDevice","deviceId","name","serial","input","Error","deleteDevices","deviceIds","type","UpdateDeviceModal","this","props","isOpen","toggle","handleChangeInput","updatingDevice","handleUpdateDevice","Modal","centered","ModalHeader","ModalBody","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","value","disabled","onChange","errorMessage","region","ModalFooter","Button","color","onClick","isUpdating","React","Component","Home","toggleUpdateDeviceModal","setState","modal","state","devices","find","device","event","target","then","res","undefined","map","catch","err","message","handleDeleteDevice","filter","_err","model","Table","striped","i","live","toLocaleString","dateStyle","timeStyle","hour12","status","date","id","UncontrolledPopover","trigger","placement","PopoverHeader","PopoverBody","size","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAGe,SAASA,EAAT,GACb,OAD0C,EAAXC,QAE7B,qBAAKC,UAAU,oBAAf,SACE,qBAAKA,UAAU,cAAf,SACE,cAACC,EAAA,EAAD,CAASC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,cAG3C,K,+DCVAC,EAAS,CACbC,QACEC,gJAAYD,SACZ,mEACFE,QACED,gJAAYC,SACZ,sFACFC,UACEF,gJAAYE,WACZ,oDACFC,UAAWH,gJAAYG,WAAa,kCCP9BJ,EDUOD,ECVPC,QAASE,EDUFH,ECVEG,QAASC,EDUXJ,ECVWI,UAAWC,EDUtBL,ECVsBK,UAE/BC,EAAc,uCAAG,kCAAAC,EAAA,sEAEbC,EAAaC,KAAKC,MAFL,SAGSC,IAAMC,KAChCR,EACA,GACA,CACES,QAAS,CAAEC,WAAY,qBAAsBC,MAAOd,KAPrC,oBAGXe,YAHW,MAGJ,GAHI,EAUnBC,aAAaC,QAAQ,eAAgBF,EAAKG,cAC1CF,aAAaC,QAAQ,aAAcV,EAAa,MAX7B,kDAanBY,QAAQC,IAAI,kBAAZ,MAbmB,0DAAH,qDAiBL,SAAeC,EAA9B,kC,4CAAe,yCAAAf,EAAA,6DAA4BgB,aAA5B,MAAoC,GAApC,MAAwCC,iBAAxC,MAAoD,GAApD,EACTC,EAAeR,aAAaS,QAAQ,gBACpCC,EAAaV,aAAaS,QAAQ,cAEnCD,GACAE,KACDlB,KAAKC,MAAQ,IAAID,KAAKmB,OAAOD,KANlB,gCAQLrB,IARK,OASXmB,EAAeR,aAAaS,QAAQ,gBACpCC,EAAaV,aAAaS,QAAQ,cAVvB,iCAaYf,IAAM,CAC3BkB,OAAQ,OACRC,IAAK3B,EACLU,QAAS,CACP,YAAaR,EACb0B,cAAc,UAAD,OAAYN,GACzB,eAAgB,oBAElBT,KAAMgB,KAAKC,UAAU,CACnBV,QACAC,gBAvBO,eAaLU,EAbK,yBA0BJA,EAASlB,MA1BL,kCA4BXI,QAAQC,IAAI,iBAAZ,MA5BW,2D,sBCnBR,IAAMc,EAAU,uCAAG,WAAOnB,GAAP,eAAAT,EAAA,24BA2CDe,EAAW,CAAEC,MA3CZ,s0BA2CmBC,UAAWR,IA3C9B,cA2ClBkB,EA3CkB,yBA4CjBE,IAAEC,IAAIH,EAAU,2BA5CC,2CAAH,sDA+CVI,EAAY,uCAAG,mCAAA/B,EAAA,6DAASgC,EAAT,EAASA,SAAUC,EAAnB,EAAmBA,KAAMC,EAAzB,EAAyBA,OAAzB,oOAaHnB,EAAW,CAChCC,MAdwB,2NAexBC,UAAW,CAAEkB,MAAO,CAAEH,WAAUC,OAAMC,aAfd,UAapBP,EAboB,QAiBtBE,IAAEC,IAAIH,EAAU,qBAjBM,yCAkBjBE,IAAEC,IAAIH,EAAU,sBAlBC,aAmBpBS,MAAMP,IAAEC,IAAIH,EAAU,sBAnBF,2CAAH,sDAsBZU,EAAa,uCAAG,4CAAArC,EAAA,6DAAOsC,EAAP,+BAAmB,GACxCtB,EADqB,yPAYJD,EAAW,CAChCC,QACAC,UAAW,CAAEsB,KAAM,GAAID,eAdE,UAYrBX,EAZqB,QAgBvBE,IAAEC,IAAIH,EAAU,sBAhBO,yCAiBlBE,IAAEC,IAAIH,EAAU,oCAjBE,aAkBrBS,MAAMP,IAAEC,IAAIH,EAAU,sBAlBD,2CAAH,qD,uECcXa,E,uKAxEH,IAAD,EAOHC,KAAKC,MALPC,EAFK,EAELA,OACAC,EAHK,EAGLA,OACAC,EAJK,EAILA,kBACAC,EALK,EAKLA,eACAC,EANK,EAMLA,mBAEF,OACE,eAACC,EAAA,EAAD,CAAOL,OAAQA,EAAQC,OAAQ,kBAAMA,KAAUK,UAAQ,EAAvD,UACE,cAACC,EAAA,EAAD,CAAaN,OAAQ,kBAAMA,KAA3B,2BACA,eAACO,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAiBC,UAAU,UAA3B,SACE,cAACC,EAAA,EAAD,mBAEF,cAACC,EAAA,EAAD,CAAOjB,KAAK,OAAOkB,MAAOX,EAAed,SAAU0B,UAAQ,OAE7D,uBACA,eAACN,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAiBC,UAAU,UAA3B,SACE,cAACC,EAAA,EAAD,sBAEF,cAACC,EAAA,EAAD,CACEvB,KAAK,OACLM,KAAK,OACLkB,MAAOX,EAAeb,KACtB0B,SAAUd,OAGd,uBACA,eAACO,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAiBC,UAAU,UAA3B,SACE,cAACC,EAAA,EAAD,uBAEF,cAACC,EAAA,EAAD,CACEvB,KAAK,SACLM,KAAK,OACLkB,MAAOX,EAAeZ,OACtByB,SAAUd,OAGd,sBAAMzD,UAAU,gBAAhB,SAAiC0D,EAAec,eAChD,uBACA,eAACR,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAiBC,UAAU,UAA3B,SACE,cAACC,EAAA,EAAD,uBAEF,cAACC,EAAA,EAAD,CAAOjB,KAAK,OAAOkB,MAAOX,EAAee,OAAQH,UAAQ,UAG7D,eAACI,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CACEC,MAAM,UACNC,QAAS,kBAAMlB,KACfW,SAAUZ,EAAeoB,WAH3B,SAKGpB,EAAeoB,WAAa,cAAgB,WAE/C,cAACH,EAAA,EAAD,CACEC,MAAM,YACNC,QAAS,kBAAMrB,KACfc,SAAUZ,EAAeoB,WAH3B,8B,GA5DsBC,IAAMC,WCuLvBC,E,kDAvLb,WAAY3B,GAAQ,IAAD,8BACjB,cAAMA,IAiBR4B,wBAA0B,SAACtC,GACzB,EAAKuC,SAAS,CACZC,MAAOxC,EACPc,eACE,EAAK2B,MAAMC,QAAQC,MAAK,SAACC,GAAD,OAAYA,EAAO5C,WAAaA,MAAa,MAtBxD,EAyBnBa,kBAAoB,SAACgC,GACnB,EAAKN,SAAS,CACZzB,eAAe,2BACV,EAAK2B,MAAM3B,gBADF,kBAEX+B,EAAMC,OAAO7C,KAAO4C,EAAMC,OAAOrB,WA7BrB,EAiCnBV,mBAAqB,WACnB,EAAKwB,SAAS,CACZzB,eAAe,2BACV,EAAK2B,MAAM3B,gBADF,IAEZoB,YAAY,MAGhBnC,EAAa,EAAK0C,MAAM3B,gBACrBiC,MAAK,SAACC,GACDA,EACF,EAAKT,SAAS,CACZpF,SAAS,EACTqF,WAAOS,EACPP,QAAS,EAAKD,MAAMC,QAAQQ,KAAI,SAACN,GAC/B,OAAIA,EAAO5C,WAAa,EAAKyC,MAAM3B,eAAed,SACzC4C,EACF,2BACFA,GACAI,MAGPjD,aAAc,KAGhB,EAAKwC,SAAS,CACZpF,SAAS,OAIdgG,OAAM,SAACC,GACN,EAAKb,SAAS,CACZzB,eAAe,2BACV,EAAK2B,MAAM3B,gBADF,IAEZoB,YAAY,EACZN,aAAcwB,EAAIC,gBAnET,EAwEnBC,mBAAqB,SAACtD,GACpB,EAAKuC,SAAS,CAAEpF,SAAS,IACzBkD,EAAc,CAACL,IACZ+C,MAAK,SAACC,GACDA,EACF,EAAKT,SAAS,CACZpF,SAAS,EACTuF,QAAS,EAAKD,MAAMC,QAAQa,QAC1B,SAACX,GAAD,OAAYA,EAAO5C,WAAaA,OAIpC,EAAKuC,SAAS,CACZpF,SAAS,OAIdgG,OAAM,SAACK,GACN,EAAKjB,SAAS,CACZpF,SAAS,QAzFf,EAAKsF,MAAQ,CACXtF,SAAS,EACTuF,QAAS,GACTF,WAAOS,EACPnC,eAAgB,IAND,E,gEASE,IAAD,OAClBL,KAAK8B,SAAS,CAAEpF,SAAS,IACzByC,EAAW,CAAE6D,MAAO,KAAMV,MAAK,SAACC,GAC9B,EAAKT,SAAS,CACZpF,SAAS,EACTuF,QAASM,S,+BAiFL,IAAD,SAC6CvC,KAAKgC,MAAjDD,EADD,EACCA,MAAOE,EADR,EACQA,QAAS5B,EADjB,EACiBA,eAAgB3D,EADjC,EACiCA,QACxC,OACE,qCACE,eAACuG,EAAA,EAAD,CAAOC,SAAO,EAAd,UACE,gCACE,+BACE,mCACA,oCACA,uCACA,6CACA,mDACA,sCACA,wCACA,+CACA,6CAGJ,gCACGjB,EAAQQ,KAAI,SAACN,EAAQgB,GAAT,OACX,+BACE,oBAAIpF,MAAM,MAAV,SAAiBoF,EAAI,IACrB,6BAAKhB,EAAO5C,WACZ,6BAAK4C,EAAO3C,OACZ,6BAAK2C,EAAO1C,SACZ,6BAAK0C,EAAOf,SACZ,6BACG,IAAI3D,KAAK0E,EAAOiB,MAAMC,eAAe,QAAS,CAC7CC,UAAW,SACXC,UAAW,SACXC,QAAQ,MAGZ,6BAAKrB,EAAOsB,SACZ,6BACG,IAAIhG,KAAK0E,EAAOuB,MAAML,eAAe,QAAS,CAC7CC,UAAW,SACXC,UAAW,SACXC,QAAQ,MAGZ,+BACE,cAAClC,EAAA,EAAD,CACEC,MAAM,UACNC,QAAS,kBACP,EAAKK,wBAAwBM,EAAO5C,WAHxC,SAME,mBAAG5C,UAAU,iBAEf,cAAC2E,EAAA,EAAD,CAAQC,MAAM,SAASoC,GAAE,uBAAkBxB,EAAO5C,UAAlD,SACE,mBAAG5C,UAAU,kBAEf,eAACiH,EAAA,EAAD,CACEC,QAAQ,QACRC,UAAU,SACVzB,OAAM,uBAAkBF,EAAO5C,UAHjC,UAKE,cAACwE,EAAA,EAAD,yCACA,eAACC,EAAA,EAAD,mDAEE,cAAC1C,EAAA,EAAD,CACE2C,KAAK,KACL1C,MAAM,UACNC,QAAS,kBAAM,EAAKqB,mBAAmBV,EAAO5C,WAHhD,gCAzCC4C,EAAO5C,kBAuDtB,cAAC,EAAD,CACEW,SAAU6B,EACV5B,OAAQH,KAAK6B,wBACbzB,kBAAmBJ,KAAKI,kBACxBC,eAAgBA,EAChBC,mBAAoBN,KAAKM,qBAE3B,cAAC7D,EAAD,CAASC,QAASA,W,GAlLPgF,IAAMC,WCNVuC,MAJf,WACE,OAAO,cAAC,EAAD,KCSMC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB/B,MAAK,YAAkD,IAA/CgC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.0817c310.chunk.js","sourcesContent":["import React from \"react\";\nimport { Spinner } from \"reactstrap\";\n\nexport default function Spinne({ loading }) {\n  return loading ? (\n    <div className=\"loading-container\">\n      <div className=\"loading-div\">\n        <Spinner style={{ width: \"3rem\", height: \"3rem\" }} />\n      </div>\n    </div>\n  ) : null;\n}\n","const config = {\n  API_KEY:\n    process.env.API_KEY ||\n    \"7c62db1cfb47550927b11191b7995f6cd482b7481fd0d98f1d8b403937b909f9\",\n  API_URL:\n    process.env.API_URL ||\n    \"https://aitjmbzhsbagnbysj2jrinbrsq.appsync-api.ap-northeast-1.amazonaws.com/graphql\",\n  TOKEN_URL:\n    process.env.TOKEN_URL ||\n    \"https://bms-api.viatick.com/main/api/oauth2/token\",\n  X_API_KEY: process.env.X_API_KEY || \"da2-zlk3xmy44fg4jpj73vlwlfi7sq\",\n};\n\nexport default config;\n","import axios from \"axios\";\nimport config from \"../config\";\n\nconst { API_KEY, API_URL, TOKEN_URL, X_API_KEY } = config;\n\nconst getAccessToken = async () => {\n  try {\n    const created_at = Date.now();\n    const { data = {} } = await axios.post(\n      TOKEN_URL,\n      {},\n      {\n        headers: { grant_type: \"client_credentials\", scope: API_KEY },\n      }\n    );\n    localStorage.setItem(\"access_token\", data.access_token);\n    localStorage.setItem(\"expired_at\", created_at + 3600 * 1000);\n  } catch (error) {\n    console.log(\"GET TOKEN ERROR\", error);\n  }\n};\n\nexport default async function gqlRequest({ query = \"\", variables = {} }) {\n  let ACCESS_TOKEN = localStorage.getItem(\"access_token\");\n  let EXPIRED_AT = localStorage.getItem(\"expired_at\");\n  if (\n    !ACCESS_TOKEN ||\n    !EXPIRED_AT ||\n    Date.now() > new Date(Number(EXPIRED_AT))\n  ) {\n    await getAccessToken();\n    ACCESS_TOKEN = localStorage.getItem(\"access_token\");\n    EXPIRED_AT = localStorage.getItem(\"expired_at\");\n  }\n  try {\n    const response = await axios({\n      method: \"post\",\n      url: API_URL,\n      headers: {\n        \"X-Api-Key\": X_API_KEY,\n        Authorization: `Bearer ${ACCESS_TOKEN}`,\n        \"Content-Type\": \"application/json\",\n      },\n      data: JSON.stringify({\n        query,\n        variables,\n      }),\n    });\n    return response.data;\n  } catch (error) {\n    console.log(\"CALL API ERROR\", error);\n  }\n}\n","import _ from \"lodash\";\nimport gqlRequest from \"../util/gqlRequest\";\n\nexport const getDevices = async (data) => {\n  const query = `query\n    getSensorsWithIoT(\n        $model: Int,\n    ) {\n        getSensorsWithIoT(\n            model: $model,\n        ) {\n            deviceId\n            name\n            serial\n            mac\n            region\n            longitude\n            latitude\n            floor\n            distance\n            remark\n            optional\n            active\n            date\n            live\n            battery\n            humidity\n            temperature\n            height\n            maxHeight\n            x\n            y\n            z\n            tags\n            deploymentDate\n            compositionData\n            unicastAddr\n            meshStatus\n            status\n            error\n            lockStatus\n            network\n            frequency\n            server\n        }\n    }`;\n  const response = await gqlRequest({ query, variables: data });\n  return _.get(response, \"data.getSensorsWithIoT\");\n};\n\nexport const updateDevice = async ({ deviceId, name, serial }) => {\n  const query = `mutation\n    updateDevice(\n          $input: DeviceUpdateInput,\n    ) {\n        updateDevice(\n            input: $input,\n        ) {\n            deviceId\n            name\n            serial\n        }\n    }`;\n  const response = await gqlRequest({\n    query,\n    variables: { input: { deviceId, name, serial } },\n  });\n  if (_.get(response, \"data.updateDevice\"))\n    return _.get(response, \"data.updateDevice\");\n  throw Error(_.get(response, \"errors[0].message\"));\n};\n\nexport const deleteDevices = async (deviceIds = []) => {\n  const query = `mutation\n      deleteDevices(\n        $type: String, $deviceIds: [Int]\n      ) {\n          deleteDevices(\n              type: $type,\n              deviceIds: $deviceIds\n          ) {\n            rows_deleted\n          }\n      }`;\n  const response = await gqlRequest({\n    query,\n    variables: { type: \"\", deviceIds },\n  });\n  if (_.get(response, \"data.deleteDevices\"))\n    return _.get(response, \"data.deleteDevices.rows_deleted\");\n  throw Error(_.get(response, \"errors[0].message\"));\n};\n","import React from \"react\";\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n  InputGroupText,\n} from \"reactstrap\";\n\nclass UpdateDeviceModal extends React.Component {\n  render() {\n    const {\n      isOpen,\n      toggle,\n      handleChangeInput,\n      updatingDevice,\n      handleUpdateDevice,\n    } = this.props;\n    return (\n      <Modal isOpen={isOpen} toggle={() => toggle()} centered>\n        <ModalHeader toggle={() => toggle()}>UPDATE DEVICE</ModalHeader>\n        <ModalBody>\n          <InputGroup>\n            <InputGroupAddon addonType=\"prepend\">\n              <InputGroupText>ID</InputGroupText>\n            </InputGroupAddon>\n            <Input type=\"text\" value={updatingDevice.deviceId} disabled />\n          </InputGroup>\n          <br />\n          <InputGroup>\n            <InputGroupAddon addonType=\"prepend\">\n              <InputGroupText>Label</InputGroupText>\n            </InputGroupAddon>\n            <Input\n              name=\"name\"\n              type=\"text\"\n              value={updatingDevice.name}\n              onChange={handleChangeInput}\n            />\n          </InputGroup>\n          <br />\n          <InputGroup>\n            <InputGroupAddon addonType=\"prepend\">\n              <InputGroupText>Serial</InputGroupText>\n            </InputGroupAddon>\n            <Input\n              name=\"serial\"\n              type=\"text\"\n              value={updatingDevice.serial}\n              onChange={handleChangeInput}\n            />\n          </InputGroup>\n          <span className=\"error-message\">{updatingDevice.errorMessage}</span>\n          <br />\n          <InputGroup>\n            <InputGroupAddon addonType=\"prepend\">\n              <InputGroupText>Region</InputGroupText>\n            </InputGroupAddon>\n            <Input type=\"text\" value={updatingDevice.region} disabled />\n          </InputGroup>\n        </ModalBody>\n        <ModalFooter>\n          <Button\n            color=\"primary\"\n            onClick={() => handleUpdateDevice()}\n            disabled={updatingDevice.isUpdating}\n          >\n            {updatingDevice.isUpdating ? \"Updating...\" : \"Update\"}\n          </Button>\n          <Button\n            color=\"secondary\"\n            onClick={() => toggle()}\n            disabled={updatingDevice.isUpdating}\n          >\n            Cancel\n          </Button>\n        </ModalFooter>\n      </Modal>\n    );\n  }\n}\n\nexport default UpdateDeviceModal;\n","import React from \"react\";\nimport {\n  Table,\n  Button,\n  UncontrolledPopover,\n  PopoverHeader,\n  PopoverBody,\n} from \"reactstrap\";\nimport Spinner from \"../../component/Spinner\";\nimport { getDevices, updateDevice, deleteDevices } from \"../../services/device\";\nimport UpdateDeviceModal from \"./components/UpdateDeviceModal\";\n\nclass Home extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      devices: [],\n      modal: undefined,\n      updatingDevice: {},\n    };\n  }\n  componentDidMount() {\n    this.setState({ loading: true });\n    getDevices({ model: 19 }).then((res) => {\n      this.setState({\n        loading: false,\n        devices: res,\n      });\n    });\n  }\n  toggleUpdateDeviceModal = (deviceId) => {\n    this.setState({\n      modal: deviceId,\n      updatingDevice:\n        this.state.devices.find((device) => device.deviceId === deviceId) || {},\n    });\n  };\n  handleChangeInput = (event) => {\n    this.setState({\n      updatingDevice: {\n        ...this.state.updatingDevice,\n        [event.target.name]: event.target.value,\n      },\n    });\n  };\n  handleUpdateDevice = () => {\n    this.setState({\n      updatingDevice: {\n        ...this.state.updatingDevice,\n        isUpdating: true,\n      },\n    });\n    updateDevice(this.state.updatingDevice)\n      .then((res) => {\n        if (res) {\n          this.setState({\n            loading: false,\n            modal: undefined,\n            devices: this.state.devices.map((device) => {\n              if (device.deviceId !== this.state.updatingDevice.deviceId)\n                return device;\n              return {\n                ...device,\n                ...res,\n              };\n            }),\n            updateDevice: {},\n          });\n        } else {\n          this.setState({\n            loading: false,\n          });\n        }\n      })\n      .catch((err) => {\n        this.setState({\n          updatingDevice: {\n            ...this.state.updatingDevice,\n            isUpdating: false,\n            errorMessage: err.message,\n          },\n        });\n      });\n  };\n  handleDeleteDevice = (deviceId) => {\n    this.setState({ loading: true });\n    deleteDevices([deviceId])\n      .then((res) => {\n        if (res) {\n          this.setState({\n            loading: false,\n            devices: this.state.devices.filter(\n              (device) => device.deviceId !== deviceId\n            ),\n          });\n        } else {\n          this.setState({\n            loading: false,\n          });\n        }\n      })\n      .catch((_err) => {\n        this.setState({\n          loading: false,\n        });\n      });\n  };\n  render() {\n    const { modal, devices, updatingDevice, loading } = this.state;\n    return (\n      <>\n        <Table striped>\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>ID</th>\n              <th>Label</th>\n              <th>Serial Code</th>\n              <th>Last Saved region</th>\n              <th>Live</th>\n              <th>Status</th>\n              <th>Created Since</th>\n              <th>Action</th>\n            </tr>\n          </thead>\n          <tbody>\n            {devices.map((device, i) => (\n              <tr key={device.deviceId}>\n                <th scope=\"row\">{i + 1}</th>\n                <td>{device.deviceId}</td>\n                <td>{device.name}</td>\n                <td>{device.serial}</td>\n                <td>{device.region}</td>\n                <td>\n                  {new Date(device.live).toLocaleString(\"en-US\", {\n                    dateStyle: \"medium\",\n                    timeStyle: \"medium\",\n                    hour12: false,\n                  })}\n                </td>\n                <td>{device.status}</td>\n                <td>\n                  {new Date(device.date).toLocaleString(\"en-US\", {\n                    dateStyle: \"medium\",\n                    timeStyle: \"medium\",\n                    hour12: false,\n                  })}\n                </td>\n                <td>\n                  <Button\n                    color=\"primary\"\n                    onClick={() =>\n                      this.toggleUpdateDeviceModal(device.deviceId)\n                    }\n                  >\n                    <i className=\"fa fa-edit\"></i>\n                  </Button>\n                  <Button color=\"danger\" id={`PopoverFocus-${device.deviceId}`}>\n                    <i className=\"fa fa-trash\"></i>\n                  </Button>\n                  <UncontrolledPopover\n                    trigger=\"focus\"\n                    placement=\"bottom\"\n                    target={`PopoverFocus-${device.deviceId}`}\n                  >\n                    <PopoverHeader>Delete device comfirmation</PopoverHeader>\n                    <PopoverBody>\n                      Would you like to delete this device!\n                      <Button\n                        size=\"sm\"\n                        color=\"warning\"\n                        onClick={() => this.handleDeleteDevice(device.deviceId)}\n                      >\n                        Confirm\n                      </Button>\n                    </PopoverBody>\n                  </UncontrolledPopover>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n        <UpdateDeviceModal\n          isOpen={!!modal}\n          toggle={this.toggleUpdateDeviceModal}\n          handleChangeInput={this.handleChangeInput}\n          updatingDevice={updatingDevice}\n          handleUpdateDevice={this.handleUpdateDevice}\n        />\n        <Spinner loading={loading} />\n      </>\n    );\n  }\n}\n\nexport default Home;\n","import Home from './pages/home';\n\nfunction App() {\n  return <Home></Home>\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}